package QoS.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Availability_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new CapabilitiesProfile_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new DataRate_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Deadline_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Delay_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Depth_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Durability_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ErrorRate_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new History_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Jitter_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new LeaseDuration_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Lifespan_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Liveliness_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new LossRate_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new QoSDefinition_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Reliability_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new RequirementsProfile_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba270L), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x75d27ff7603f6d14L), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba26dL), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba267L), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba26cL), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba264L), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba266L), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba26fL), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba263L), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba26bL), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba26aL), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba268L), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba269L), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba26eL), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x57f420665365fe0L), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x6f2f11a0135ba265L), MetaIdFactory.conceptId(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0xdbe2d924f785bbaL)).seal();
}
