package QoS.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Availability;
  private ConceptPresentation props_CapabilitiesProfile;
  private ConceptPresentation props_Capability;
  private ConceptPresentation props_DataRate;
  private ConceptPresentation props_Deadline;
  private ConceptPresentation props_Delay;
  private ConceptPresentation props_Depth;
  private ConceptPresentation props_Durability;
  private ConceptPresentation props_ErrorRate;
  private ConceptPresentation props_History;
  private ConceptPresentation props_Jitter;
  private ConceptPresentation props_LeaseDuration;
  private ConceptPresentation props_Lifespan;
  private ConceptPresentation props_Liveliness;
  private ConceptPresentation props_LossRate;
  private ConceptPresentation props_QoSDefinition;
  private ConceptPresentation props_Reliability;
  private ConceptPresentation props_Requirement;
  private ConceptPresentation props_RequirementsProfile;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Availability:
        if (props_Availability == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Availability");
          props_Availability = cpb.create();
        }
        return props_Availability;
      case LanguageConceptSwitch.CapabilitiesProfile:
        if (props_CapabilitiesProfile == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CapabilitiesProfile = cpb.create();
        }
        return props_CapabilitiesProfile;
      case LanguageConceptSwitch.Capability:
        if (props_Capability == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Capability = cpb.create();
        }
        return props_Capability;
      case LanguageConceptSwitch.DataRate:
        if (props_DataRate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DataRate");
          props_DataRate = cpb.create();
        }
        return props_DataRate;
      case LanguageConceptSwitch.Deadline:
        if (props_Deadline == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Deadline");
          props_Deadline = cpb.create();
        }
        return props_Deadline;
      case LanguageConceptSwitch.Delay:
        if (props_Delay == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Delay");
          props_Delay = cpb.create();
        }
        return props_Delay;
      case LanguageConceptSwitch.Depth:
        if (props_Depth == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Depth");
          props_Depth = cpb.create();
        }
        return props_Depth;
      case LanguageConceptSwitch.Durability:
        if (props_Durability == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Durability");
          props_Durability = cpb.create();
        }
        return props_Durability;
      case LanguageConceptSwitch.ErrorRate:
        if (props_ErrorRate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ErrorRate");
          props_ErrorRate = cpb.create();
        }
        return props_ErrorRate;
      case LanguageConceptSwitch.History:
        if (props_History == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("History");
          props_History = cpb.create();
        }
        return props_History;
      case LanguageConceptSwitch.Jitter:
        if (props_Jitter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Jitter");
          props_Jitter = cpb.create();
        }
        return props_Jitter;
      case LanguageConceptSwitch.LeaseDuration:
        if (props_LeaseDuration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LeaseDuration");
          props_LeaseDuration = cpb.create();
        }
        return props_LeaseDuration;
      case LanguageConceptSwitch.Lifespan:
        if (props_Lifespan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Lifespan");
          props_Lifespan = cpb.create();
        }
        return props_Lifespan;
      case LanguageConceptSwitch.Liveliness:
        if (props_Liveliness == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Liveliness");
          props_Liveliness = cpb.create();
        }
        return props_Liveliness;
      case LanguageConceptSwitch.LossRate:
        if (props_LossRate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LossRate");
          props_LossRate = cpb.create();
        }
        return props_LossRate;
      case LanguageConceptSwitch.QoSDefinition:
        if (props_QoSDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_QoSDefinition = cpb.create();
        }
        return props_QoSDefinition;
      case LanguageConceptSwitch.Reliability:
        if (props_Reliability == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Reliability");
          props_Reliability = cpb.create();
        }
        return props_Reliability;
      case LanguageConceptSwitch.Requirement:
        if (props_Requirement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Requirement = cpb.create();
        }
        return props_Requirement;
      case LanguageConceptSwitch.RequirementsProfile:
        if (props_RequirementsProfile == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RequirementsProfile = cpb.create();
        }
        return props_RequirementsProfile;
    }
    return null;
  }
}
